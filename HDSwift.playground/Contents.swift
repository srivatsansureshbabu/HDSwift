import UIKit
import CoreML
import CreateMLComponents

class HDModel {
    var trainData: [[Double]]
    var trainLabels: [Int]
    var testData: [[Double]]
    var testLabels: [Int]
    var D: Int
    var totalLevel: Int
    var posIdNum: Double

    var levelList: [Int] = [0]
//    var levelHVs: [String: Int]
//    var IDHVs: MLMultiArray
    
    var trainHVs: [[Int]]
    var testHVs: [[Int]]
    var classHVs: [[Int]]
    
    init(trainData: [[Double]], trainLabels: [Int], testData: MLMultiArray, testLabels: [Int], D: Int, totalLevel: Int) {
        self.trainData = trainData
        self.trainLabels = trainLabels
        self.testData = testData
        self.testLabels = testLabels
        self.D = D
        self.totalLevel = totalLevel
        self.posIdNum = trainData[0][0]
        self.trainHVs = []
        self.testHVs = []
        self.classHVs = []
        self.levelList = getLevelList(trainData: trainData, totalLevel: totalLevel)
//        self.levelHVs = genLevelHVs(totalLevel: totalLevel, D: D)
//        self.IDHVs = genIDHVs(totalPos: posIdNum, D: D)
    }
    
    // generated by CHATGPT
    func createMLMultiArray(dimension: Int, baseVal: Double) -> MLMultiArray? {
        // Define the shape of the MLMultiArray
        let shape = [NSNumber(value: dimension)]
        
        // Attempt to create the MLMultiArray
        guard let array = try? MLMultiArray(shape: shape, dataType: .double) else {
            print("Error: Unable to create MLMultiArray")
            return nil
        }
        
        // Fill the MLMultiArray with the base value
        for i in 0..<dimension {
            array[i] = NSNumber(value: baseVal)
        }
        
        return array
    }
    
    // generated by CHATGPT
    func MLShuffleArray(_ mlMultiArray: MLMultiArray) -> MLMultiArray? {
        guard mlMultiArray.dataType == .double else {
            print("Error: MLMultiArray data type must be .double")
            return nil
        }
     
        let shape = mlMultiArray.shape
     
        // Convert MLMultiArray to Swift array
        var array: [Double] = []
        for i in 0..<mlMultiArray.count {
            array.append(mlMultiArray[i].doubleValue)
        }
     
        // Shuffle the Swift array
        let shuffledArray = array.shuffled()
     
        // Convert shuffled Swift array back to MLMultiArray
        do {
            let shuffledMLMultiArray = try MLMultiArray(shape: shape, dataType: .double)
            for (index, element) in shuffledArray.enumerated() {
                shuffledMLMultiArray[index] = NSNumber(value: element)
            }
            return shuffledMLMultiArray
        } catch {
            print("Error creating MLMultiArray: \(error)")
            return nil
        }
    }
    
    
    func getLevelList(trainData: [[Double]], totalLevel: Int) -> [Int]{
        var minimum = trainData[0][0]
        var maximum = trainData[0][0]
        var levelList: [Int] = []
        
        for item in trainData {
            
            let localMin = trainData.flatMap({ $0 }).min()
            let localMax = trainData.flatMap({ $0 }).max()
            
            if localMin! < minimum {
                minimum = localMin!
            }
            if localMax! > maximum {
                maximum = localMax!
            }
        }
        
        let length = maximum - minimum
        let gap = Int(length) / totalLevel
        
        for lv in stride(from:0, to: totalLevel, by: 1) {
            
            let value = Int(minimum) + Int(lv*gap)
            levelList.append(value)
        }
       return levelList
    }
    
    func genLevelHVs(totalLevel: Int, D: Int) -> [String: Int]{
        
        print("generating level HVs")
        let levelHVs: [String: Int] = [:]
        let indexVector = D
        let nextLevel = Int(D/2/totalLevel)
        let change = Int(D / 2)
        let toOne: [Int] = []
        for level in stride(from:0, to: totalLevel, by: 1){
            let name = level
            
            if level == 0{
                let base = createMLMultiArray(dimension: D, baseVal: -1)
                let toOne = MLShuffleArray(base!);
//                 toOne = toOne(indexVector)[:change]
            }
            else{
                let toOne = createMLMultiArray(dimension: D, baseVal: -1)
//                toOne = toOne(indexVector)[:nextLevel]
            }
            for index in toOne{
                // base[index] = base[index] * -1
                // levelHVs[name] = copy.deepcopy(base)
            }
        }
        
        return levelHVs
    }
    
    func genIDHVs(totalPos: NSNumber, D: Int) -> [String: Int]{
        print("generating ID HVs")
        let IDHVs: [String: Int] = [:]
        let indexVector = D
        let change = Int(D / 2)
        let toOne: [Int] = []
        
        return ["Hello": 10]
    }
    
    }
